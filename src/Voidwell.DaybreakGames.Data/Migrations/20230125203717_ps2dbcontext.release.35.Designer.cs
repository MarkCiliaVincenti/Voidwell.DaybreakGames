// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voidwell.DaybreakGames.Data;

namespace Voidwell.DaybreakGames.Data.Migrations
{
    [DbContext(typeof(PS2DbContext))]
    [Migration("20230125203717_ps2dbcontext.release.35")]
    partial class ps2dbcontextrelease35
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Alert", b =>
                {
                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("MetagameInstanceId")
                        .HasColumnName("metagame_instance_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<float?>("LastFactionNc")
                        .HasColumnName("last_faction_nc");

                    b.Property<float?>("LastFactionNs")
                        .HasColumnName("last_faction_ns");

                    b.Property<float?>("LastFactionTr")
                        .HasColumnName("last_faction_tr");

                    b.Property<float?>("LastFactionVs")
                        .HasColumnName("last_faction_vs");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnName("metagame_event_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<float?>("StartFactionNc")
                        .HasColumnName("start_faction_nc");

                    b.Property<float?>("StartFactionNs")
                        .HasColumnName("start_faction_ns");

                    b.Property<float?>("StartFactionTr")
                        .HasColumnName("start_faction_tr");

                    b.Property<float?>("StartFactionVs")
                        .HasColumnName("start_faction_vs");

                    b.Property<int?>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("WorldId", "MetagameInstanceId")
                        .HasName("p_k_alert");

                    b.ToTable("alert");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Character", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("BattleRank")
                        .HasColumnName("battle_rank");

                    b.Property<int>("BattleRankPercentToNext")
                        .HasColumnName("battle_rank_percent_to_next");

                    b.Property<int>("CertsEarned")
                        .HasColumnName("certs_earned");

                    b.Property<int>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("PrestigeLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prestige_level")
                        .HasDefaultValue(0);

                    b.Property<int>("TitleId")
                        .HasColumnName("title_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.HasKey("Id")
                        .HasName("p_k_character");

                    b.HasIndex("Name")
                        .HasName("i_x_character_name");

                    b.ToTable("character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int?>("AchievementCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("achievement_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("AssistCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("assist_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domination_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_capture_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityDefendedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_defended_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("MedalCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("medal_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("revenge_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("SkillPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skill_points")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_given")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_taken_by")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDeaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_deaths")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponFireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_fire_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_headshots")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_hit_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_kills")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponPlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_play_time")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_score")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_vehicle_kills")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_lifetime_stat");

                    b.ToTable("character_lifetime_stat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int?>("DominationCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domination_count_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domination_count_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domination_count_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_capture_count_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_capture_count_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facility_capture_count_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("revenge_count_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("revenge_count_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("revenge_count_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_given_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_given_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_given_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_taken_by_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_taken_by_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_taken_by_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_headshots_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_headshots_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_headshots_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_killed_by_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_killed_by_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_killed_by_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_kills_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_kills_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_kills_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_vehicle_kills_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_vehicle_kills_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_vehicle_kills_vs")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_lifetime_stat_by_faction");

                    b.ToTable("character_lifetime_stat_by_faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<double>("Deviation")
                        .HasColumnName("deviation");

                    b.Property<double>("Rating")
                        .HasColumnName("rating");

                    b.Property<double>("Volatility")
                        .HasColumnName("volatility");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_rating");

                    b.HasIndex("Rating")
                        .HasName("i_x_character_rating_rating");

                    b.ToTable("character_rating");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deaths")
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fire_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hit_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by")
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills")
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("play_time")
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("score")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId")
                        .HasName("p_k_character_stat");

                    b.ToTable("character_stat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_vs")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId")
                        .HasName("p_k_character_stat_by_faction");

                    b.ToTable("character_stat_by_faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatHistory", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<string>("StatName")
                        .HasColumnName("stat_name");

                    b.Property<int>("AllTime")
                        .HasColumnName("all_time");

                    b.Property<string>("Day")
                        .HasColumnName("day");

                    b.Property<string>("Month")
                        .HasColumnName("month");

                    b.Property<int>("OneLifeMax")
                        .HasColumnName("one_life_max");

                    b.Property<string>("Week")
                        .HasColumnName("week");

                    b.HasKey("CharacterId", "StatName")
                        .HasName("p_k_character_stat_history");

                    b.ToTable("character_stat_history");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnName("last_login_date");

                    b.Property<DateTime>("LastSaveDate")
                        .HasColumnName("last_save_date");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnName("minutes_played");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_time");

                    b.ToTable("character_time");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterUpdateQueue", b =>
                {
                    b.Property<string>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_update_queue");

                    b.ToTable("character_update_queue");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("DamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_given")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_taken_by")
                        .HasDefaultValue(0);

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deaths")
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fire_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("Headshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("headshots")
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hit_count")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by")
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills")
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("play_time")
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("score")
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_kills")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId")
                        .HasName("p_k_character_weapon_stat");

                    b.HasIndex("ItemId", "Kills")
                        .HasName("i_x_character_weapon_stat_item_id_kills");

                    b.ToTable("character_weapon_stat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("DamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_given_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_given_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_given_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_taken_by_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_taken_by_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_taken_by_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("headshots_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("headshots_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("headshots_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killed_by_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kills_vs")
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_kills_nc")
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_kills_tr")
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_kills_vs")
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId")
                        .HasName("p_k_character_weapon_stat_by_faction");

                    b.ToTable("character_weapon_stat_by_faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DailyPopulation", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("AvgPlayTime")
                        .HasColumnName("avg_play_time");

                    b.Property<int>("NcAvgPlayTime")
                        .HasColumnName("nc_avg_play_time");

                    b.Property<int>("NcCount")
                        .HasColumnName("nc_count");

                    b.Property<int>("NsAvgPlayTime")
                        .HasColumnName("ns_avg_play_time");

                    b.Property<int>("NsCount")
                        .HasColumnName("ns_count");

                    b.Property<int>("TrAvgPlayTime")
                        .HasColumnName("tr_avg_play_time");

                    b.Property<int>("TrCount")
                        .HasColumnName("tr_count");

                    b.Property<int>("VsAvgPlayTime")
                        .HasColumnName("vs_avg_play_time");

                    b.Property<int>("VsCount")
                        .HasColumnName("vs_count");

                    b.HasKey("Date", "WorldId")
                        .HasName("p_k_daily_population");

                    b.ToTable("daily_population");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DailyWeaponStats", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnName("weapon_id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<int>("AircraftKills")
                        .HasColumnName("aircraft_kills");

                    b.Property<float>("AircraftKpu")
                        .HasColumnName("aircraft_kpu");

                    b.Property<float>("AvgBr")
                        .HasColumnName("avg_br");

                    b.Property<int>("Headshots")
                        .HasColumnName("headshots");

                    b.Property<int>("Kills")
                        .HasColumnName("kills");

                    b.Property<float>("Kpu")
                        .HasColumnName("kpu");

                    b.Property<float>("Q1Kpu")
                        .HasColumnName("q1_kpu");

                    b.Property<float>("Q2Kpu")
                        .HasColumnName("q2_kpu");

                    b.Property<float>("Q3Kpu")
                        .HasColumnName("q3_kpu");

                    b.Property<int>("Q4Headshots")
                        .HasColumnName("q4_headshots");

                    b.Property<int>("Q4Kills")
                        .HasColumnName("q4_kills");

                    b.Property<float>("Q4Kpu")
                        .HasColumnName("q4_kpu");

                    b.Property<int>("Q4Uniques")
                        .HasColumnName("q4_uniques");

                    b.Property<int>("Uniques")
                        .HasColumnName("uniques");

                    b.Property<int>("VehicleKills")
                        .HasColumnName("vehicle_kills");

                    b.Property<float>("VehicleKpu")
                        .HasColumnName("vehicle_kpu");

                    b.HasKey("WeaponId", "Date")
                        .HasName("p_k_daily_weapon_stats");

                    b.ToTable("daily_weapon_stats");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.AchievementEarned", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("AchievementId")
                        .HasColumnName("achievement_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("CharacterId", "Timestamp")
                        .HasName("p_k_event_achievement_earned");

                    b.ToTable("event_achievement_earned");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.BattlerankUp", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("BattleRank")
                        .HasColumnName("battle_rank");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("CharacterId", "Timestamp", "BattleRank")
                        .HasName("p_k_event_battlerank_up");

                    b.ToTable("event_battlerank_up");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentLock", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnName("metagame_event_id");

                    b.Property<float?>("PopulationNc")
                        .HasColumnName("population_nc");

                    b.Property<float?>("PopulationTr")
                        .HasColumnName("population_tr");

                    b.Property<float?>("PopulationVs")
                        .HasColumnName("population_vs");

                    b.Property<int?>("TriggeringFaction")
                        .HasColumnName("triggering_faction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId")
                        .HasName("p_k_event_continent_lock");

                    b.ToTable("event_continent_lock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentUnlock", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnName("metagame_event_id");

                    b.Property<int?>("TriggeringFaction")
                        .HasColumnName("triggering_faction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId")
                        .HasName("p_k_event_continent_unlock");

                    b.ToTable("event_continent_unlock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.Death", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("AttackerCharacterId")
                        .HasColumnName("attacker_character_id");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int?>("AttackerFireModeId")
                        .HasColumnName("attacker_fire_mode_id");

                    b.Property<int?>("AttackerLoadoutId")
                        .HasColumnName("attacker_loadout_id");

                    b.Property<string>("AttackerOutfitId")
                        .HasColumnName("attacker_outfit_id");

                    b.Property<int?>("AttackerVehicleId")
                        .HasColumnName("attacker_vehicle_id");

                    b.Property<int?>("AttackerWeaponId")
                        .HasColumnName("attacker_weapon_id");

                    b.Property<int?>("CharacterLoadoutId")
                        .HasColumnName("character_loadout_id");

                    b.Property<string>("CharacterOutfitId")
                        .HasColumnName("character_outfit_id");

                    b.Property<bool>("IsHeadshot")
                        .HasColumnName("is_headshot");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId")
                        .HasName("p_k_event_death");

                    b.HasIndex("AttackerWeaponId", "Timestamp")
                        .HasName("i_x_event_death_attacker_weapon_id_timestamp");

                    b.ToTable("event_death");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.FacilityControl", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<int?>("NewFactionId")
                        .HasColumnName("new_faction_id");

                    b.Property<int>("DurationHeld")
                        .HasColumnName("duration_held");

                    b.Property<int?>("OldFactionId")
                        .HasColumnName("old_faction_id");

                    b.Property<string>("OutfitId")
                        .HasColumnName("outfit_id");

                    b.Property<float?>("ZoneControlNc")
                        .HasColumnName("zone_control_nc");

                    b.Property<float?>("ZoneControlNs")
                        .HasColumnName("zone_control_ns");

                    b.Property<float?>("ZoneControlTr")
                        .HasColumnName("zone_control_tr");

                    b.Property<float?>("ZoneControlVs")
                        .HasColumnName("zone_control_vs");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.Property<int?>("ZonePopulationNc")
                        .HasColumnName("zone_population_nc");

                    b.Property<int?>("ZonePopulationNs")
                        .HasColumnName("zone_population_ns");

                    b.Property<int?>("ZonePopulationTr")
                        .HasColumnName("zone_population_tr");

                    b.Property<int?>("ZonePopulationVs")
                        .HasColumnName("zone_population_vs");

                    b.HasKey("Timestamp", "WorldId", "FacilityId", "NewFactionId")
                        .HasName("p_k_event_facility_control");

                    b.ToTable("event_facility_control");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.GainExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnName("character_id");

                    b.Property<int>("ExperienceId")
                        .HasColumnName("experience_id");

                    b.Property<int?>("LoadoutId")
                        .HasColumnName("loadout_id");

                    b.Property<string>("OtherId")
                        .HasColumnName("other_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("p_k_event_gain_experience");

                    b.HasIndex("Timestamp", "CharacterId", "ExperienceId")
                        .HasName("i_x_event_gain_experience_timestamp_character_id_experience_id");

                    b.HasIndex("Timestamp", "WorldId", "ExperienceId", "ZoneId")
                        .HasName("i_x_event_gain_experience_timestamp_world_id_experience_id_zone");

                    b.ToTable("event_gain_experience");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.MetagameEvent", b =>
                {
                    b.Property<int>("MetagameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("metagame_id");

                    b.Property<int?>("ExperienceBonus")
                        .HasColumnName("experience_bonus");

                    b.Property<int?>("InstanceId")
                        .HasColumnName("instance_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnName("metagame_event_id");

                    b.Property<string>("MetagameEventState")
                        .HasColumnName("metagame_event_state");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<float?>("ZoneControlNc")
                        .HasColumnName("zone_control_nc");

                    b.Property<float?>("ZoneControlTr")
                        .HasColumnName("zone_control_tr");

                    b.Property<float?>("ZoneControlVs")
                        .HasColumnName("zone_control_vs");

                    b.Property<int?>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("MetagameId")
                        .HasName("p_k_event_metagame_event");

                    b.ToTable("event_metagame_event");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityCapture", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<string>("OutfitId")
                        .HasColumnName("outfit_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId")
                        .HasName("p_k_event_player_facility_capture");

                    b.ToTable("event_player_facility_capture");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityDefend", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<string>("OutfitId")
                        .HasColumnName("outfit_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId")
                        .HasName("p_k_event_player_facility_defend");

                    b.ToTable("event_player_facility_defend");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogin", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.HasKey("Timestamp", "CharacterId")
                        .HasName("p_k_event_player_login");

                    b.HasIndex("Timestamp", "WorldId")
                        .HasName("i_x_event_player_login_timestamp_world_id");

                    b.ToTable("event_player_login");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogout", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.HasKey("Timestamp", "CharacterId")
                        .HasName("p_k_event_player_logout");

                    b.HasIndex("Timestamp", "WorldId")
                        .HasName("i_x_event_player_logout_timestamp_world_id");

                    b.ToTable("event_player_logout");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.VehicleDestroy", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("AttackerCharacterId")
                        .HasColumnName("attacker_character_id");

                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<int?>("AttackerVehicleId")
                        .HasColumnName("attacker_vehicle_id");

                    b.Property<int?>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("AttackerLoadoutId")
                        .HasColumnName("attacker_loadout_id");

                    b.Property<int?>("AttackerWeaponId")
                        .HasColumnName("attacker_weapon_id");

                    b.Property<int?>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<int?>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId", "AttackerVehicleId", "VehicleId")
                        .HasName("p_k_event_vehicle_destroy");

                    b.HasIndex("AttackerWeaponId", "Timestamp")
                        .HasName("i_x_event_vehicle_destroy_attacker_weapon_id_timestamp");

                    b.ToTable("event_vehicle_destroy");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<float>("Xp")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("p_k_experience");

                    b.ToTable("experience");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.FacilityLink", b =>
                {
                    b.Property<int>("FacilityIdA")
                        .HasColumnName("facility_id_a");

                    b.Property<int>("FacilityIdB")
                        .HasColumnName("facility_id_b");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("FacilityIdA", "FacilityIdB")
                        .HasName("p_k_facility_link");

                    b.ToTable("facility_link");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Faction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("CodeTag")
                        .HasColumnName("code_tag");

                    b.Property<int?>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<bool>("UserSelectable")
                        .HasColumnName("user_selectable");

                    b.HasKey("Id")
                        .HasName("p_k_faction");

                    b.ToTable("faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<int?>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsVehicleWeapon")
                        .HasColumnName("is_vehicle_weapon");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnName("item_category_id");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnName("item_type_id");

                    b.Property<int?>("MaxStackSize")
                        .HasColumnName("max_stack_size");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_item");

                    b.ToTable("item");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_item_category");

                    b.ToTable("item_category");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Loadout", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .HasColumnName("code_name");

                    b.Property<int>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("p_k_loadout");

                    b.ToTable("loadout");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapHex", b =>
                {
                    b.Property<int>("MapRegionId")
                        .HasColumnName("map_region_id");

                    b.Property<int>("XPos")
                        .HasColumnName("x_pos");

                    b.Property<int>("YPos")
                        .HasColumnName("y_pos");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.Property<int>("HexType")
                        .HasColumnName("hex_type");

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name");

                    b.HasKey("MapRegionId", "XPos", "YPos", "ZoneId")
                        .HasName("p_k_map_hex");

                    b.ToTable("map_hex");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int?>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<string>("FacilityName")
                        .HasColumnName("facility_name");

                    b.Property<string>("FacilityType")
                        .HasColumnName("facility_type");

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnName("facility_type_id");

                    b.Property<float?>("XPos")
                        .HasColumnName("x_pos");

                    b.Property<float?>("YPos")
                        .HasColumnName("y_pos");

                    b.Property<float?>("ZPos")
                        .HasColumnName("z_pos");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("p_k_map_region");

                    b.ToTable("map_region");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("ExperienceBonus")
                        .HasColumnName("experience_bonus");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_metagame_event_category");

                    b.ToTable("metagame_event_category");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventCategoryZone", b =>
                {
                    b.Property<int>("MetagameEventCategoryId")
                        .HasColumnName("metagame_event_category_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.HasKey("MetagameEventCategoryId")
                        .HasName("p_k_metagame_event_category_zone");

                    b.ToTable("metagame_event_category_zone");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_metagame_event_state");

                    b.ToTable("metagame_event_state");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Outfit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<int?>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<string>("LeaderCharacterId")
                        .HasColumnName("leader_character_id");

                    b.Property<int>("MemberCount")
                        .HasColumnName("member_count");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("WorldId")
                        .HasColumnName("world_id");

                    b.HasKey("Id")
                        .HasName("p_k_outfit");

                    b.ToTable("outfit");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnName("character_id");

                    b.Property<DateTime?>("MemberSinceDate")
                        .HasColumnName("member_since_date");

                    b.Property<string>("OutfitId")
                        .IsRequired()
                        .HasColumnName("outfit_id");

                    b.Property<string>("Rank")
                        .HasColumnName("rank");

                    b.Property<int?>("RankOrdinal")
                        .HasColumnName("rank_ordinal");

                    b.HasKey("CharacterId")
                        .HasName("p_k_outfit_member");

                    b.ToTable("outfit_member");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.PlayerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnName("character_id");

                    b.Property<int>("Duration")
                        .HasColumnName("duration");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnName("login_date");

                    b.Property<DateTime>("LogoutDate")
                        .HasColumnName("logout_date");

                    b.HasKey("Id")
                        .HasName("p_k_player_session");

                    b.HasIndex("CharacterId", "LoginDate", "LogoutDate")
                        .HasName("i_x_player_session_character_id_login_date_logout_date");

                    b.ToTable("player_session");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Profile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<int>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("ProfileTypeId")
                        .HasColumnName("profile_type_id");

                    b.HasKey("Id")
                        .HasName("p_k_profile");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.SanctionedWeapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_sanctioned_weapon");

                    b.ToTable("sanctioned_weapon");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Title", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_title");

                    b.ToTable("title");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("Cost")
                        .HasColumnName("cost");

                    b.Property<int?>("CostResourceId")
                        .HasColumnName("cost_resource_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_vehicle");

                    b.ToTable("vehicle");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("FactionId")
                        .HasColumnName("faction_id");

                    b.HasKey("VehicleId", "FactionId")
                        .HasName("p_k_vehicle_faction");

                    b.ToTable("vehicle_faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.WeaponAggregate", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int?>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<float?>("AVGAccuracy")
                        .HasColumnName("avg_accuracy");

                    b.Property<float?>("AVGDeaths")
                        .HasColumnName("avg_deaths");

                    b.Property<float?>("AVGFireCount")
                        .HasColumnName("avg_fire_count");

                    b.Property<float?>("AVGHeadshots")
                        .HasColumnName("avg_headshots");

                    b.Property<float?>("AVGHitCount")
                        .HasColumnName("avg_hit_count");

                    b.Property<float?>("AVGHsr")
                        .HasColumnName("avg_hsr");

                    b.Property<float?>("AVGKdr")
                        .HasColumnName("avg_kdr");

                    b.Property<float?>("AVGKills")
                        .HasColumnName("avg_kills");

                    b.Property<float?>("AVGKph")
                        .HasColumnName("avg_kph");

                    b.Property<float?>("AVGPlayTime")
                        .HasColumnName("avg_play_time");

                    b.Property<float?>("AVGScore")
                        .HasColumnName("avg_score");

                    b.Property<float?>("AVGVehicleKills")
                        .HasColumnName("avg_vehicle_kills");

                    b.Property<float?>("AVGVkph")
                        .HasColumnName("avg_vkph");

                    b.Property<float?>("STDAccuracy")
                        .HasColumnName("std_accuracy");

                    b.Property<float?>("STDDeaths")
                        .HasColumnName("std_deaths");

                    b.Property<float?>("STDFireCount")
                        .HasColumnName("std_fire_count");

                    b.Property<float?>("STDHeadshots")
                        .HasColumnName("std_headshots");

                    b.Property<float?>("STDHitCount")
                        .HasColumnName("std_hit_count");

                    b.Property<float?>("STDHsr")
                        .HasColumnName("std_hsr");

                    b.Property<float?>("STDKdr")
                        .HasColumnName("std_kdr");

                    b.Property<float?>("STDKills")
                        .HasColumnName("std_kills");

                    b.Property<float?>("STDKph")
                        .HasColumnName("std_kph");

                    b.Property<float?>("STDPlayTime")
                        .HasColumnName("std_play_time");

                    b.Property<float?>("STDScore")
                        .HasColumnName("std_score");

                    b.Property<float?>("STDVehicleKills")
                        .HasColumnName("std_vehicle_kills");

                    b.Property<float?>("STDVkph")
                        .HasColumnName("std_vkph");

                    b.Property<long?>("SumDeaths")
                        .HasColumnName("sum_deaths");

                    b.Property<long?>("SumFireCount")
                        .HasColumnName("sum_fire_count");

                    b.Property<long?>("SumHeadshots")
                        .HasColumnName("sum_headshots");

                    b.Property<long?>("SumHitCount")
                        .HasColumnName("sum_hit_count");

                    b.Property<long?>("SumKills")
                        .HasColumnName("sum_kills");

                    b.Property<long?>("SumPlayTime")
                        .HasColumnName("sum_play_time");

                    b.Property<long?>("SumScore")
                        .HasColumnName("sum_score");

                    b.Property<long?>("SumVehicleKills")
                        .HasColumnName("sum_vehicle_kills");

                    b.HasKey("ItemId", "VehicleId")
                        .HasName("p_k_weapon_aggregate");

                    b.ToTable("weapon_aggregate");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.World", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_world");

                    b.ToTable("world");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Zone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("HexSize")
                        .HasColumnName("hex_size");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_zone");

                    b.ToTable("zone");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ZoneOwnershipSnapshot", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<int>("FactionId")
                        .HasColumnName("faction_id");

                    b.Property<int?>("MetagameInstanceId")
                        .HasColumnName("metagame_instance_id");

                    b.HasKey("Timestamp", "WorldId", "ZoneId", "RegionId")
                        .HasName("p_k_zone_ownership_snapshot");

                    b.HasIndex("WorldId", "MetagameInstanceId")
                        .HasName("i_x_zone_ownership_snapshot_world_id_metagame_instance_id");

                    b.ToTable("zone_ownership_snapshot");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.UpdaterScheduler", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnName("last_update_date");

                    b.HasKey("Id")
                        .HasName("p_k_updater_scheduler");

                    b.ToTable("updater_scheduler");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", "CharacterId")
                        .HasConstraintName("f_k_character_lifetime_stat_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStatsByFaction")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", "CharacterId")
                        .HasConstraintName("f_k_character_lifetime_stat_by_faction_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("Rating")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", "CharacterId")
                        .HasConstraintName("f_k_character_rating_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("f_k_character_stat_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("StatsByFaction")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("f_k_character_stat_by_faction_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatHistory", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("StatsHistory")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("f_k_character_stat_history_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("Time")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", "CharacterId")
                        .HasConstraintName("f_k_character_time_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStats")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("f_k_character_weapon_stat_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStatsByFaction")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("f_k_character_weapon_stat_by_faction_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("OutfitMembership")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", "CharacterId")
                        .HasConstraintName("f_k_outfit_member_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", "Vehicle")
                        .WithMany("Faction")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("f_k_vehicle_faction_vehicle_vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
